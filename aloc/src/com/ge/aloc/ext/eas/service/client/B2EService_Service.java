/*
 * Copyright © 2012-2013 GE. ALL RIGHTS RESERVED.
 * FileName: B2EService_Service.java
 * Purpose: B2EService_Service is used for external users.
 */
package com.ge.aloc.ext.eas.service.client;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import com.ge.aloc.exception.ALOCRuntimeException;

/**
 * @author chaitanya.n
 *
 */

/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.3-b02-
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = B2EService_Service.SERVICE_NAME, targetNamespace = B2EService_Service.SERVICE_NAMESPACE)
public class B2EService_Service extends Service
{
	private static final String WSDL_FILE_NAME = "wsdl/EAS.wsdl";
	public static final String SERVICE_NAMESPACE = "http://com.ge.b2ewebservice/B2EService/";
	public static final String SERVICE_NAME = "B2EService";
	
	/**
	 * Returns location of the WSDL file
	 * @return
	 */
	private static URL getWSDLLocation() {
		URL wsdlLocation = null;
		ClassLoader ctxClassLoader = Thread.currentThread().getContextClassLoader();
		if(ctxClassLoader != null) {
			wsdlLocation = ctxClassLoader.getResource(WSDL_FILE_NAME);
		}
		
		if(wsdlLocation == null) {
			String msg = new StringBuilder().append("Resource \'").append(WSDL_FILE_NAME).append("\' not found in context path").toString();
			throw new ALOCRuntimeException(ALOCRuntimeException.EC_RESOURCE_NOTFOUND, msg);
		}
		return wsdlLocation;
	}

	/**
	 * 
	 * @param wsdlLocation
	 * @param serviceName
	 */
	public B2EService_Service() {
		super(getWSDLLocation(), new QName(SERVICE_NAMESPACE, SERVICE_NAME));
	}

	/**
	 * 
	 * @return
	 *     returns B2EService
	 */
	@WebEndpoint(name = "B2EServiceSOAP")
	public B2EService getB2EServiceSOAP() {
		return super.getPort(new QName("http://com.ge.b2ewebservice/B2EService/", "B2EServiceSOAP"), B2EService.class);
	}

	/**
	 * 
	 * @param features
	 *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
	 * @return
	 *     returns B2EService
	 */
	@WebEndpoint(name = "B2EServiceSOAP")
    public B2EService getB2EServiceSOAP(WebServiceFeature... features) {
        return super.getPort(new QName("http://com.ge.b2ewebservice/B2EService/", "B2EServiceSOAP"), B2EService.class, features);
    }
}
