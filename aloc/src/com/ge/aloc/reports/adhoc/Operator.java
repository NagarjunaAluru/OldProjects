//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.07.31 at 06:47:23 AM IST 
//


package com.ge.aloc.reports.adhoc;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for operator.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="operator">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="like"/>
 *     &lt;enumeration value="equal"/>
 *     &lt;enumeration value="less than"/>
 *     &lt;enumeration value="less than or equal"/>
 *     &lt;enumeration value="greater than"/>
 *     &lt;enumeration value="greater than or equal"/>
 *     &lt;enumeration value="in between"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "operator")
@XmlEnum
public enum Operator {

	@XmlEnumValue("like")
    LIKE("like", "LK"),
    
    @XmlEnumValue("equal")
    EQUAL("equal", "EQ"),
    
    @XmlEnumValue("less than")
    LESS_THAN("less than", "LT"),
    
    @XmlEnumValue("less than or equal")
    LESS_THAN_OR_EQUAL("less than or equal", "LE"),
    
    @XmlEnumValue("greater than")
    GREATER_THAN("greater than", "GT"),
    
    @XmlEnumValue("greater than or equal")
    GREATER_THAN_OR_EQUAL("greater than or equal", "GE"),
    
    @XmlEnumValue("in")
    IN("in", "IN"),
    
    @XmlEnumValue("in between")
    IN_BETWEEN("in between", "BT");
    
    
    private final String value;
    private String symbol;
    
    /**
     * Operator Constructor
     * @param value
     * @param symbol
     */
    Operator(String value, String symbol) {
        this.value = value;
        this.symbol = symbol;
    }
    
    /**
     * 
     * @return
     */
    public String value() {
        return value;
    }
    
    /**
     * 
     * @return
     */
    public String symbol() {
    	return this.symbol;
    }
    
    /**
     * 
     * @return
     */
    public String displayName() {
    	return this.displayName();
    }

    /**
     * Method to get the Operator value
     * @param v
     * @return
     */
    public static Operator fromValue(String v) {
        for (Operator c: Operator.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }
    
    /**
     * Method to get the Operator value
     * @param s
     * @return
     */
    public static Operator fromSymbol(String s) {
    	for (Operator c : Operator.values()) {
			if (c.symbol.equals(s)){
				return c;
			}
		}
    	throw new IllegalArgumentException(s);
    }
}
