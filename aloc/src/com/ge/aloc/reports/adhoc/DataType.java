//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.07.31 at 06:47:23 AM IST 
//

package com.ge.aloc.reports.adhoc;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

import com.hydus.hwf.util.StringUtils;

/**
 * <p>Java class for operator.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="dataType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="string"/>
 *     &lt;enumeration value="int"/>
 *     &lt;enumeration value="integer"/>
 *     &lt;enumeration value="decimal"/>
 *     &lt;enumeration value="date"/>
 *     &lt;enumeration value="datetime"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "dataType")
@XmlEnum
public enum DataType {
	
	@XmlEnumValue("string")
    STRING("string"),
    
    @XmlEnumValue("int")
    INT("int"),
    
    @XmlEnumValue("integer")
    INTEGER("integer"),
    
    @XmlEnumValue("decimal")
    DECIMAL("decimal"),
    
    @XmlEnumValue("date")
    DATE("date") {
		public String storageFormat(String value) throws ParseException {
			String result = null;
			if(StringUtils.isNotBlank(value)) {
				SimpleDateFormat ddf = new SimpleDateFormat(DATE_DISPLAY_FORMAT);
				Date date = ddf.parse(value);
				SimpleDateFormat sdf = new SimpleDateFormat(DATE_STORAGE_FORMAT);
				result = sdf.format(date);
			}
			return result;
		}
		
		public String storageTimestampFormat(String value) throws ParseException {
			String result = null;
			if(StringUtils.isNotBlank(value)) {
				SimpleDateFormat ddf = new SimpleDateFormat(DATE_DISPLAY_FORMAT);
				Date date = ddf.parse(value);
				SimpleDateFormat sdf = new SimpleDateFormat(DATE_STORAGE_TIME_FORMAT);
				result = sdf.format(date);
			}
			return result;
		}
		
		public String displayFormat(String value) throws ParseException {
			String result = null;
			if(StringUtils.isNotBlank(value)) {
				SimpleDateFormat sdf = new SimpleDateFormat(DATE_STORAGE_FORMAT);
				Date date = sdf.parse(value);
				SimpleDateFormat ddf = new SimpleDateFormat(DATE_DISPLAY_FORMAT);
				result = ddf.format(date);
			}
			return result;
		}
		
		public String displayTimestampFormat(String value) throws ParseException {
			String result = null;
			if(StringUtils.isNotBlank(value)) {
				SimpleDateFormat sdf = new SimpleDateFormat(DATE_STORAGE_TIME_FORMAT);
				Date date = sdf.parse(value);
				SimpleDateFormat ddf = new SimpleDateFormat(DATE_DISPLAY_FORMAT);
				result = ddf.format(date);
			}
			return result;
		}
	},
    
    @XmlEnumValue("datetime")
    DATETIME("datetime");
	
	
	private static final String DATE_STORAGE_FORMAT = "yyyy-MM-dd";
	private static final String DATE_DISPLAY_FORMAT = "MM/dd/yyyy";
	private static final String DATE_STORAGE_TIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
    
    private final String value;
	
	DataType(String value) {
        this.value = value;
    }
	
	public String value() {
        return value;
    }
	
	public String storageFormat(String value) throws ParseException {
		return value;
	}
	
	public String storageTimestampFormat(String value) throws ParseException {
		return value;
	}
	
	public String displayFormat(String value) throws ParseException {
		return value;
	}
	
	public String displayTimestampFormat(String value) throws ParseException {
		return value;
	}
	public static DataType fromValue(String v) {
        for (DataType c: DataType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }
}
