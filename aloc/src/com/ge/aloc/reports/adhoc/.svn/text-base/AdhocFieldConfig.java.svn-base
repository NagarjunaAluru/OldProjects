//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.07.31 at 07:29:27 AM IST 
//


package com.ge.aloc.reports.adhoc;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.regex.Pattern;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import com.ge.aloc.InstrumentType;
import com.hydus.hwf.util.StringUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http:///treasury.ge.com/schemas/ALOC/adhoc-report-field-config}section" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "sections"
})
@XmlRootElement(name = "adhoc-field-config")
public class AdhocFieldConfig {

	@XmlElement(name="section")
    protected List<Section> sections;

    /**
     * 
     */
    protected AdhocFieldConfig() {
    }
    
    /**
     * 
     * @param sections
     */
    public AdhocFieldConfig(List<Section> sections) {
    	this.sections = sections;
    }

    /**
     * Gets the value of the section property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the section property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSection().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Section }
     * 
     * 
     */
    public List<Section> getSections() {
        if (sections == null) {
            sections = new ArrayList<Section>();
        }
        return this.sections;
    }

    /**
     * 
     * @param id
     * @return
     */
    protected Field getField(String id) {
    	Field result = null;
    	for(Section section : getSections()) {
    		result = section.getFieldMap().get(id);
    		if(result != null) {
    			break;
    		}
    	}
    	return result;
    }
    
    /**
     * 
     * @param fieldName
     * @param instrumentTypes
     * @return
     */
    protected List<Section> search(String fieldName, InstrumentType... instrumentTypes) {
    	Collection<InstrumentType> searchInstrTypes = Arrays.asList(instrumentTypes);
    	List<Section> result = new ArrayList<Section>();
    	Pattern fieldNamePattern = prepareRegExPattern(fieldName);
    	List<Field> sectionFields = null;
    	Section resultSection = null;
    	for(Section section : getSections()) {
    		sectionFields = section.search(fieldNamePattern, searchInstrTypes);
    		if(sectionFields != null && !sectionFields.isEmpty()) {
    			resultSection = new Section(section.getId(), section.getName(), section.getInstrumentIds(), sectionFields);
    			result.add(resultSection);
    		}
    	}
    	return result;
    }
    
    /**
     * 
     */
    protected void init() {
    	for(Section section : getSections()) {
    		section.init();
    	}
    }
    
    /**
     * 
     * @param fieldName
     * @return
     */
    private Pattern prepareRegExPattern(String fieldName) {
    	String strPattern = null;
    	if(StringUtils.isBlank(fieldName)) {
    		strPattern = ".*";
    	} else {
    		strPattern = ".*" + fieldName + ".*";
    	}
    	Pattern pattern = Pattern.compile(strPattern, Pattern.CASE_INSENSITIVE);
    	return pattern;
    }
}
